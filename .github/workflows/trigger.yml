name: Quality Gate Trigger

on:
  issue_comment:
    types:
      - created
      - edited

jobs:
  get-branch:
    name: Get branch from PR
    runs-on: ubuntu-latest
    steps:
      - uses: FranzDiebold/github-env-vars-action@v2
      - name: Print environment variables exposed by this action
        run: |
          echo "CI_REPOSITORY_SLUG=$CI_REPOSITORY_SLUG"
          echo "CI_REPOSITORY_OWNER=$CI_REPOSITORY_OWNER"
          echo "CI_REPOSITORY_OWNER_SLUG=$CI_REPOSITORY_OWNER_SLUG"
          echo "CI_REPOSITORY_NAME=$CI_REPOSITORY_NAME"
          echo "CI_REPOSITORY_NAME_SLUG=$CI_REPOSITORY_NAME_SLUG"
          echo "CI_REPOSITORY=$CI_REPOSITORY"
          echo "CI_REF_SLUG=$CI_REF_SLUG"
          echo "CI_ACTION_REF_NAME=$CI_ACTION_REF_NAME"
          echo "CI_ACTION_REF_NAME_SLUG=$CI_ACTION_REF_NAME_SLUG"
          echo "CI_REF_NAME=$CI_REF_NAME"
          echo "CI_REF_NAME_SLUG=$CI_REF_NAME_SLUG"
          echo "CI_REF=$CI_REF"
          echo "CI_HEAD_REF_SLUG=$CI_HEAD_REF_SLUG"
          echo "CI_HEAD_REF=$CI_HEAD_REF"
          echo "CI_BASE_REF_SLUG=$CI_BASE_REF_SLUG"
          echo "CI_BASE_REF=$CI_BASE_REF"
          echo "CI_SHA_SHORT=$CI_SHA_SHORT"
          echo "CI_SHA=$CI_SHA"
          echo "CI_PR_SHA_SHORT=$CI_PR_SHA_SHORT"
          echo "CI_PR_SHA=$CI_PR_SHA"
          echo "CI_PR_NUMBER=$CI_PR_NUMBER"
          echo "CI_PR_ID=$CI_PR_ID"
          echo "CI_PR_TITLE=$CI_PR_TITLE"
          echo "CI_PR_DESCRIPTION=$CI_PR_DESCRIPTION"
          echo "CI_ACTOR=$CI_ACTOR"
          echo "CI_EVENT_NAME=$CI_EVENT_NAME"
          echo "CI_RUN_ID=$CI_RUN_ID"
          echo "CI_RUN_NUMBER=$CI_RUN_NUMBER"
          echo "CI_WORKFLOW=$CI_WORKFLOW"
          echo "CI_ACTION=$CI_ACTION"
      - name: Print environment variables exposed by GitHub
        run: |
          echo "GITHUB_ACTOR=$GITHUB_ACTOR"
          echo "GITHUB_REPOSITORY=$GITHUB_REPOSITORY"
          echo "GITHUB_SHA=$GITHUB_SHA"
          echo "GITHUB_REF=$GITHUB_REF"
          echo "GITHUB_HEAD_REF=$GITHUB_HEAD_REF"
          echo "GITHUB_BASE_REF=$GITHUB_BASE_REF"
          echo "GITHUB_EVENT_NAME=$GITHUB_EVENT_NAME"
          echo "GITHUB_RUN_ID=$GITHUB_RUN_ID"
          echo "GITHUB_RUN_NUMBER=$GITHUB_RUN_NUMBER"
          echo "GITHUB_WORKFLOW=$GITHUB_WORKFLOW"
          echo "GITHUB_ACTION=$GITHUB_ACTION"

# jobs:
#   get-branch:
#     runs-on: ubuntu-latest
#     name: Get branch from PR
#     steps:
#       - name: GitHub Environment Variables Action
#         uses: FranzDiebold/github-env-vars-action@v2.7.0

# - name: Checkout - ${{ env.CI_REF_NAME }}
# uses: actions/checkout@v3
# with:
# token: ${{ secrets.OBG_GHACTION_TOKEN }}
# fetch-depth: 0
# ref: ${{ env.CI_REF_NAME }}

# jobs:
#   trigger-quality-gate:
#     runs-on: ubuntu-latest
#     name: Trigger quality gate correct branch
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3
#       - name: ðŸ”§ Setup Node
#         uses: actions/setup-node@v3
#         with:
#           node-version: "16.x"
#       # - name: checkout pr
#       #   run: hub pr checkout ${{ github.event.issue.pull_request  }}
#       - name: Print values
#         uses: actions/github-script@v6
#         id: get-pr
#         with:
#         # github.ref is full branch name - refs/heads/feature-branch-1
#         # github.ref_name is short - feature-branch-1
#         # github.token
#         # context.issue.number is undefined
#         # const result = await github.pulls.get(request)
#           script: |

#             const request = {
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               pull_number: context.issue.number
#             }
#             try {
#               return result.data
#             } catch (err) {
#               core.setFailed(`Request failed with error ${err}`)
#             }

#             console.log('html_url is ', context.comment.html_url);
#             console.log('html_url is ', context.comment.html_url);
#             console.log('context is ', JSON.stringify(context));
#            # console.log(`Getting PR #${request.pull_number} from ${request.owner}/${request.repo}`);

#            # console.log('context.repo.owner is ', context.repo.owner);
#            # console.log('context.repo.repo is ', context.repo.repo);
#            # console.log('context.issue is ', context.issue);
#           # const possiblePR = $(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }');
#           # console.log('possiblePR is ', possiblePR);

#       #  const request2 = `/repos/{context.repo.owner}/${context.repo.repo}/pulls`;

#       # - uses: actions/checkout@v2
#       #   with:
#       #     repository: ${{ fromJSON(steps.get-pr.outputs.result).head.repo.full_name }}
#       #     ref: ${{ fromJSON(steps.get-pr.outputs.result).head.sha }} # or .head.ref for branch name

#     # if: contains(github.event.comment.body, 'demo-available')
#     # name: Trigger that quality baby
#     # uses: chillianosson/action-practice/.github/workflows/quality-gate.yml@main
#     # with:
#     # e2e-branch: "lets go baby"

#   # demo-available:
#   #   runs-on: ubuntu-latest
#   #   if: contains(github.event.comment.body, 'demo-available')
#   #   steps:
#   #     - name: Trigger Quality Gate
#   #       uses: chillianosson/action-practice/.github/workflows/quality-gate.yml@main
#   #       with:
#   #         e2e-branch: "Passed input data branch name from triggerrrrrrr"
#   #     - name: Checkout
#   #       uses: actions/checkout@v3
#   #     - name: Like comment
#   #       uses: actions/github-script@v4
#   #       with:
#   #         script: |
#   #           const {owner, repo} = context.issue
#   #           github.reactions.createForIssueComment({
#   #             owner,
#   #             repo,
#   #             comment_id: context.payload.comment.id,
#   #             content: "+1",
#   #           });
