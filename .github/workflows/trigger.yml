name: Quality Gate Trigger

on:
  issue_comment:
    types: [created, edited]

jobs:
  pr_details:
    # This job only runs for
    # * pull request
    # * comments
    # * with a valid demo url - needs regex perhaps?
    # * from the area-core-rc bot
    name: PR details
    # if: |
    #   ${{ github.event.issue.pull_request }} &&
    #   ${{ contains(github.event.comment.body, 'assigned demo url is')}}) &&
    #   ${{ github.event.comment.user.name}}
    runs-on: ubuntu-latest
    outputs:
      PR: ${{ steps.get-pr.outputs.result }}
      REPO: ${{ steps.set-variables.outputs.REPO }}
      PR_BRANCH: ${{ steps.set-variables.outputs.PR_BRANCH }}
      COMMENT_USER: ${{ steps.set-variables.outputs.COMMENT_USER }}
      COMMENT_BODY: ${{ steps.set-variables.outputs.COMMENT_BODY }}
      ISSUE_URL: ${{ steps.set-variables.outputs.ISSUE_URL }}

    steps:
      - name: Get PR Details
        uses: actions/github-script@v3
        id: get-pr
        with:
          script: |
            const prRequest = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            }
            try {
              const pr = await github.pulls.get(prRequest)
              return pr.data
            } catch (err) {
              core.setFailed(`Request failed with error ${err}`)
            }

      - name: Set variables in environment
        id: set-variables
        run: |
          echo "REPO=${{ fromJSON(steps.get-pr.outputs.result).head.repo.full_name }}" >> $GITHUB_OUTPUT
          echo "PR_BRANCH=${{ fromJSON(steps.get-pr.outputs.result).head.ref }}" >> $GITHUB_OUTPUT
          echo "COMMENT_USER=${{ github.event.comment.user.login }}" >> $GITHUB_OUTPUT
          echo "COMMENT_BODY=${{ github.event.comment.body }}" >> $GITHUB_OUTPUT
          echo "ISSUE_URL=${{ github.event.issue.issue_url }}" >> $GITHUB_OUTPUT

  validate_comment:
    name: Validate Comment
    runs-on: ubuntu-latest
    needs: [pr_details]
    outputs:
      verified: ${{ steps.validate-comment.outputs.result  == 'true' }}
    steps:
      - name: Checkout correct repo and branch
        uses: actions/checkout@v2
        with:
          repository: ${{ needs.pr_details.outputs.REPO }}
          ref: ${{ needs.pr_details.outputs.PR_BRANCH }}

      - name: print relevant values
        id: validate-comment
        uses: actions/github-script@v6
        with:
          script: |
            const comment = "${{ needs.pr_details.outputs.COMMENT_BODY }}";
            const user = "${{ needs.pr_details.outputs.COMMENT_USER }}";
            const demoRegex = new RegExp('demo.betsson.com');
            const isValid = demoRegex.test(comment);
            console.log('github.event.issue is ', github.event.issue);
            return isValid

  # set_ready_label:
  #   name: Set ready label
  #   runs-on: ubuntu-latest
  #   needs: [pr_details, validate_comment]
  #   if: ${{ needs.validate_comment.outputs.verified }}
  #   steps:
  #     - name: Checkout correct repo and branch
  #       uses: actions/checkout@v2
  #       with:
  #         repository: ${{ needs.pr_details.outputs.REPO }}
  #         ref: ${{ needs.pr_details.outputs.PR_BRANCH }}

  #     - name: Add label
  #       env: # Or as an environment variable
  #         # GH_TOKEN: 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
  #         GH_TOKEN: ${{ github.token }}
  #       run: |
  #         gh issue edit 6 --add-label "demo-available"
  #       # gh issue edit 6 --add-label "demo-available-for-branch-${{ needs.pr_details.outputs.PR_BRANCH }}"