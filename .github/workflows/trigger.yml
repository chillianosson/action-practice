name: Quality Gate Trigger

on:
  issue_comment:
    types: [created, edited]

jobs:
  pr_details:
    name: PR details
    runs-on: ubuntu-latest
    outputs:
      REPO: ${{ steps.set-variables.outputs.REPO }}
      PR_BRANCH: ${{ steps.set-variables.outputs.PR_BRANCH }}

    steps:
      - name: Get PR Branch
        uses: actions/github-script@v3
        id: get-pr
        with:
          script: |
            const prRequest = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            }
            try {
              const pr = await github.pulls.get(prRequest)
              return pr.data
            } catch (err) {
              core.setFailed(`PR fetch request failed with error ${err}`)
            }

      - name: Set variables in environment
        id: set-variables
        run: |
          echo "REPO=${{ fromJSON(steps.get-pr.outputs.result).head.repo.full_name }}" >> $GITHUB_OUTPUT
          echo "PR_BRANCH=${{ fromJSON(steps.get-pr.outputs.result).head.ref }}" >> $GITHUB_OUTPUT

  validate_comment:
    name: Validate Comment
    runs-on: ubuntu-latest
    needs: [pr_details]
    outputs:
      verified: ${{ steps.validate-comment.outputs.result  == 'true' }}
    steps:
      - name: Checkout correct repo and branch
        uses: actions/checkout@v2
        with:
          repository: ${{ needs.pr_details.outputs.REPO }}
          ref: ${{ needs.pr_details.outputs.PR_BRANCH }}

      - name: Return true if valid
        id: validate-comment
        uses: actions/github-script@v6
        with:
          script: |
            console.log(context.payload.issue.number)
            console.log(context.payload.comment.body)
            demoRegex = new RegExp('demo.betsson.com');
            isValid = demoRegex.test(context.payload.comment.body);
            console.log(isValid);
            return isValid;

  set_ready_label:
    name: Set ready label
    runs-on: ubuntu-latest
    needs: [pr_details, validate_comment]
    if: ${{ needs.validate_comment.outputs.verified }}
    steps:
      - name: Checkout correct repo and branch
        uses: actions/checkout@v2
        with:
          repository: ${{ needs.pr_details.outputs.REPO }}
          ref: ${{ needs.pr_details.outputs.PR_BRANCH }}

      - name: Add label
        env:
          # GH_TOKEN: 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
          GH_TOKEN: ${{ github.token }}
        run: gh issue edit ${{ context.payload.issue.number }} --add-label "demo-available-for-branch-${{ needs.pr_details.outputs.PR_BRANCH }}"


    #  echo "setting it to ${{ needs.pr_details.outputs.ISSUE_URL.split("/").pop() }}"


