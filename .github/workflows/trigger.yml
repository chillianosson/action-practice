name: Quality Gate Trigger

on:
  issue_comment:
    types: [created, edited]

jobs:
  pr_details:
    name: PR details
    runs-on: ubuntu-latest
    outputs:
      REPO: ${{ steps.set-variables.outputs.REPO }}
      PR_BRANCH: ${{ steps.set-variables.outputs.PR_BRANCH }}
    steps:
      - name: Get PR Branch
        uses: actions/github-script@v3
        id: get-pr
        with:
          script: |
            const prRequest = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            }
            try {
              const pr = await github.pulls.get(prRequest)
              return pr.data
            } catch (err) {
              core.setFailed(`PR fetch request failed with error ${err}`)
            }

      - name: Set variables in environment
        id: set-variables
        run: |
          echo "REPO=${{ fromJSON(steps.get-pr.outputs.result).head.repo.full_name }}" >> $GITHUB_OUTPUT
          echo "PR_BRANCH=${{ fromJSON(steps.get-pr.outputs.result).head.ref }}" >> $GITHUB_OUTPUT

  validate_comment:
    name: Validate Comment
    runs-on: ubuntu-latest
    needs: [pr_details]
    outputs:
      verified: ${{ steps.validate-comment.outputs.result  == 'true' }}
      issue_number: ${{ steps.get-issue-number.outputs.result }}
    steps:
      - name: Checkout correct repo and branch
        uses: actions/checkout@v2
        with:
          repository: ${{ needs.pr_details.outputs.REPO }}
          ref: ${{ needs.pr_details.outputs.PR_BRANCH }}

      - name: Return true if valid
        id: validate-comment
        uses: actions/github-script@v6
        with:
          script: |
            console.log(context.payload.issue.number)
            console.log(context.payload.comment.body)
            demoRegex = new RegExp('demo.betsson.com');
            isValid = demoRegex.test(context.payload.comment.body);
            console.log(isValid);
            return isValid;

      - name: Get Issue Number
        id: get-issue-number
        uses: actions/github-script@v6
        with:
          script: |
            console.log(context.payload.issue.number)
            return context.payload.issue.number;

  set_ready_label:
    name: Set ready label
    runs-on: ubuntu-latest
    needs: [pr_details, validate_comment]
    if: ${{ needs.validate_comment.outputs.verified }}
    steps:
      - name: Checkout correct repo and branch
        uses: actions/checkout@v3
        with:
          # repository: ${{ needs.pr_details.outputs.REPO }}
          ref: ${{ needs.pr_details.outputs.PR_BRANCH }}
          token: ${{ github.token }}

      - name: Add label
        env:
          GH_TOKEN: ${{ github.token }}
        run: gh issue edit "${{ needs.validate_comment.outputs.issue_number }}" --add-label "demo-available-for-branch-${{ needs.pr_details.outputs.PR_BRANCH }}"

      - name: Setup useful environment variables
        uses: FranzDiebold/github-env-vars-action@v2

      - name: Git Status
        run: |
          git status

      - name: Setup Node Version
        uses: actions/setup-node@v1
        with:
          always-auth: false
          node-version: "16.x"

      - name: Push the change
        run:  |
          git config --global user.email "cillian.omurchu@betssongroup.com"
          git config --global user.name "Cillian O Murchu"
          touch demo-url.txt
          git add demo-url.txt
          git commit -m "demo-available"
          git push
